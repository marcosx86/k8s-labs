kind: Deployment
apiVersion: apps/v1
metadata:
  name: sonarqube
  namespace: nm-sonarqube
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      volumes:
        - name: nfsvol
          persistentVolumeClaim:
            claimName: gfs-sonarqube-data
      initContainers:
        - name: fix-volume-permission
          image: busybox
          imagePullPolicy: Always
          command: ['sh', '-c', 'chown -v 999:999 /opt/sonarqube/data']
          securityContext:
            privileged: true
          volumeMounts:
            - name: nfsvol
              mountPath: /opt/sonarqube/data
        - name: init-sysctl
          image: 'busybox:1.27.2'
          imagePullPolicy: IfNotPresent
          command: ['sysctl', '-w', 'vm.max_map_count=262144']
          securityContext:
            privileged: true
            procMount: Default
      containers:
        - name: sonarqube
          image: '10.10.67.210/sonatype/sonarqube:7.9.5-openjdk-11'
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          env:
            - name: SONARQUBE_JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: sonarqube-postgres-credentials
                  key: username
            - name: SONARQUBE_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sonarqube-postgres-credentials
                  key: password
            - name: SONARQUBE_JDBC_URL
              value: 'jdbc:postgresql://postgresql.nm-postgres:5432/sonarqube'
          resources:
            limits:
              cpu: '4'
              memory: 3Gi
            requests:
              cpu: '2'
              memory: 2Gi
          volumeMounts:
            - name: nfsvol
              mountPath: /opt/sonarqube/data
          readinessProbe:
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 4
          livenessProbe:
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 90
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
  strategy:
    type: Recreate
